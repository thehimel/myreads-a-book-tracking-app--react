
// App.js
updateShelf = (book, shelf) => {
    const books = this.state.books;

    var found = false;

    for(var i = 0; i < books.length; i++) {
        if(books[i].id === book.id) {
            books[i].shelf = shelf;

            this.setState((currentState) => ({
                books
            }));

            found = true;
            break;
        }
    }

    if (!found) {
        book.shelf = `"${shelf}"`;
        console.log(book);
        this.setState((currentState) => ({
            books: currentState.books.concat([book])
        }))
    }

    BooksAPI.update(book, shelf);
};

// App.js
updateShelf = (book, shelf) => {
    /*
    First update in the remote server, Then fetch it
    Alwasy use then in this format. If you use function.then(function), it won't work properly.
    */
    BooksAPI.update(book, shelf)
    .then(() => {
        this.getBooks();
    });
};


// ListBooks.js
const { books } = this.props;

const currentlyReadingBooks = books.filter(book => (
    book.shelf === "currentlyReading"
));

const wantToReadBooks = books.filter(book => (
    book.shelf === "wantToRead"
));

const readBooks = books.filter(book => (
    book.shelf === "read"
));


// SearchBooks.js
this.setState((currState) => ({
    ...currState,
    // If nothing is found the API will return an object with error property.
    // So, if books.error exists, return empty list. Else, return the result.
    showingBooks: books.error ? [] : books
}))


// Suggestion by Udacity
Good work using promises :clap:
To make your code even more awesome, you can use async + await - a special syntax to work with promises in a more concise fashion. See example below:

async componentDidMount() {
const books = await BooksAPI.getAll()
this.setState({ books })
}